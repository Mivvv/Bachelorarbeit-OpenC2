import requests 
import json
import string
import random
import time
import math

def sendCommand():

    # local server IP
    url = "http://192.168.56.103"
    
    #region commands
    # calling commands
    cmd = denyIP("192.168.56.101",True)
    #cmd = denyIP("2001:4860:4860::8888",False)
    #cmd = denyMac("FA:A4:A4:E1:62:73")
    #cmd = delete("/home/michael/Desktop/test.txt")
    #cmd = query()
    #cmd = contain("08:00:27:0f:89:bf")
    #regionend
        
                
    # generate unique X-Request-ID       
    ContentID = ""
    upper = string.ascii_lowercase
    digits = string.digits
    for i in range(0,20):
        if(random.getrandbits(1)):
            ContentID += random.choice(upper)
        else:
            ContentID += str(random.choice(digits))
            
    # send POST to local sever with unique headers and json in the body
    headers1 ={"X-Request-ID":ContentID,"Content-Type":"application/openc2-cmd+json;version=1.0"}
    response = requests.post(url,verify=False,json=cmd,headers = headers1)
    
    
    # print calls to test body,code and headers
    #print(json.dumps(json.loads(response.text),indent=4))
    #print(response.status_code)
    #print(response.headers)
    return response



#region generatin command functions
def contain(macAddr):
    cmd = {"action":"contain","target":{"mac_addr":macAddr}}
    cmd = json.dumps(cmd)
    return cmd
    

def delete(filePath):
    cmd = {"action":"delete","target":{"file":{"path":filePath}}}
    cmd = json.dumps(cmd)
    return cmd


def denyIP(ipAddress,ipv4):
    if(ipv4):
        cmd = {"action":"deny","target":{"ipv4_net":ipAddress}}
        cmd = json.dumps(cmd)
        return cmd
    else:
        cmd = {"action":"deny","target":{"ipv6_net":ipAddress}}
        cmd = json.dumps(cmd)
        return cmd

def denyMac(macAddr):
    cmd = {"action":"deny","target":{"mac_addr":macAddr}}
    cmd = json.dumps(cmd)
    return cmd


def query():
    cmd = {"action":"query","target":{"features":("versions profiles pairs rate_limit").split()}}
    cmd = json.dumps(cmd)
    return cmd 
#regionend


# command can be generated by calling sendCommand()
# E.g., cmd = sendCommand()


#region testing 1000 of commands and calculating mean and sum
inlist = list()
for i in range(0,1000):
    start_time = time.time()
    sendComm = sendCommand()
    inlist.append(time.time()-start_time)

summ = 0
for num in inlist:
    summ+=num
print("Sum: "+str(summ))
inlist.sort()
print((inlist[math.ceil(len(inlist)/2)]+inlist[math.floor(len(inlist)/2)])/2)
#regionend